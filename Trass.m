function S=Trass(I,X,Y,x,y,ri,Xc,Yc)
%% функция определения зон с вероятностью объекта в них 
% поступает карта с кругами, положение камеры, положение центра кругов и их радиус
N=length(I);
m=100; %коэффициент расчета плотности вероятности
R=sqrt(max(X,abs(N-X))^2+max(Y,abs(N-Y))^2); % максимально удаленная точка
I1=I;
%% версия 2.1 рабочая
[fi,r] = cart2pol(x-X,y-Y); %определение координат препятствий относительно робота
pfi=atan(ri./r'); %угол раскрытия препятствия 
dfi=atan(1/R)/2; % максимальный угол для различия двух ближайших клеток на краю
for i=1:length(x) % для каждого препятствия расчет свой
    c=0;
    if nargin==8
        xa=find(x(i)==Xc);
        ya=find(y(i)==Yc);
        if length(find(xa==ya'))
            c=1; %%ничего не будет
        end
    end
    if c==0 %обычное препятствие
    
    I=-ones(N); % шаблон для этого расчета
    r0=r(i); % радиус препятствия
    hfi=(fi(i)-pfi(i)):dfi:(fi(i)+pfi(i)); % разбивка углов препятствия
    rr=r0:0.1:R; % разбивка радиусов за препятствием
    [RR, FIFI]=meshgrid(rr,hfi); % составления матрицы углов и радиусов
    [x1, y1]=pol2cart(FIFI,RR); % переход из полярных координат в координаты декартовы для точек препятствия и зоны за ним
    r1=abs((tan(abs(hfi-fi(i)))*r0)); % расчет расстояний до основного диаметра препятствия
    f=(RR-r0)./m+repmat( (I1(x(i),y(i))*(1-r1/ri(i)))',1,length(rr)); % расчет вероятностей существования
    %%%!!! здесь все еще прямая, а не гаусс
    x1=reshape(x1,[],1); % переразбивка координат и вероятностей в вектор
    y1=reshape(y1,[],1);
    f=reshape(f,[],1);
    x1=round(x1)+X;y1=round(y1)+Y; % перенос относительно точки X,Y
    f( y1<=0 ) =[]; % убиение выходящих за пределы координат
    x1( y1<=0 ) =[];
    y1( y1<=0 ) =[];
     f( x1<=0 ) =[];
    y1( x1<=0 ) =[];
    x1( x1<=0 ) =[];
     f( y1>N ) =[];
    x1( y1>N ) =[];
    y1( y1>N ) =[];
     f( x1>N ) =[];
    y1( x1>N ) =[];
    x1( x1>N ) =[];
    
    XY=[x1 y1]; % выбивание уникальных номеров
    [C, c]=unique(XY,'rows');
    
    if c
        XY=XY(c,:);
        f=f(c);
        c=XY(:,1)+( XY(:,2)-1 )*N; % пересчет в номера элементов матрицы
        I(c)=f; % создание шаблона видимости для препятствия
    end
    I1=max(I1,I); % объединение шаблонов на основной карте
    
    else %для цели
    I=-ones(N); % шаблон для этого расчета
    r0=r(i); % радиус препятствия
    hfi=(fi(i)-pfi(i)):dfi:(fi(i)+pfi(i)); % разбивка углов препятствия
    rr=r0:0.1:R; % разбивка радиусов за препятствием
    [RR, FIFI]=meshgrid(rr,hfi); % составления матрицы углов и радиусов
    [x1, y1]=pol2cart(FIFI,RR); % переход из полярных координат в координаты декартовы для точек препятствия и зоны за ним
    r1=abs((tan(abs(hfi-fi(i)))*r0)); % расчет расстояний до основного диаметра препятствия
    f=(RR-r0)./m+repmat( (I1(x(i),y(i))*(1-r1/ri(i)))',1,length(rr)); % расчет вероятностей существования
    %%%!!! здесь все еще прямая, а не гаусс
    x1=reshape(x1,[],1); % переразбивка координат и вероятностей в вектор
    y1=reshape(y1,[],1);
    f=reshape(f,[],1);
    x1=round(x1)+X;y1=round(y1)+Y; % перенос относительно точки X,Y
    f( y1<=0 ) =[]; % убиение выходящих за пределы координат
    x1( y1<=0 ) =[];
    y1( y1<=0 ) =[];
     f( x1<=0 ) =[];
    y1( x1<=0 ) =[];
    x1( x1<=0 ) =[];
     f( y1>N ) =[];
    x1( y1>N ) =[];
    y1( y1>N ) =[];
     f( x1>N ) =[];
    y1( x1>N ) =[];
    x1( x1>N ) =[];
    
    XY=[x1 y1]; % выбивание уникальных номеров
    [C, c]=unique(XY,'rows');
    
    if c
        XY=XY(c,:);
        f=f(c);
        c=XY(:,1)+( XY(:,2)-1 )*N; % пересчет в номера элементов матрицы
        I(c)=f; % создание шаблона видимости для препятствия
    end
    
    
    I1=max(I1,I); % объединение шаблонов на основной карте
        
    end
        
end
S=I1; % результат

if nargin==8
    S(Xc+(Yc-1)*N)=-1;
end

%% версия 2.0
%     for hfi=(fi(i)-pfi(i)):dfi:(fi(i)+pfi(i)) %виноват pol2cart угол у него только числом, а радиус вектором можно
%         
%     Ro=r0+0.6:0.1:R;
%     [x1 y1]=pol2cart(hfi,Ro);
%     %[x2 y2]=pol2cart(hfi,r0-ri(i):0.1:r0);
%     f=ones([1 length(x1)]);
%     
%     %f=f.*( 1./(1+exp(-(r0-Ro))) );
%     f=f.*(Ro-r0)/m;
%     
%     x1=round(x1)+X;y1=round(y1)+Y;
%     x2=round(x2)+X;y2=round(y2)+Y;
%      f( y1<=0 ) =[];
%     x1( y1<=0 ) =[];
%     y1( y1<=0 ) =[];
%      f( x1<=0 ) =[];
%     y1( x1<=0 ) =[];
%     x1( x1<=0 ) =[];
%      f( y1>N ) =[];
%     x1( y1>N ) =[];
%     y1( y1>N ) =[];
%      f( x1>N ) =[];
%     y1( x1>N ) =[];
%     x1( x1>N ) =[];
%     
%     XY=[x1' y1'];
%     [C, c]=unique(XY,'rows');
%     if c
%         XY=XY(c,:);
%         f=f(c);
% 
%         c=XY(:,1)+( XY(:,2)-1 )*N;
% 
%         r1=abs((tan(abs(hfi-fi(i)))*r0));
%     %     [x1 y1]=pol2cart(hfi,r);
%     %     x1=round(x1)+X;y1=round(y1)+Y;
%         f=f+I1(x(i),y(i))*(1-r1/ri(i));
%         I(c)=max(f',I(c));
% %         XY=[x2' y2'];
% %         [C, c]=unique(XY,'rows');
% %         XY=XY(c,:);
% %         c=XY(:,1)+( XY(:,2)-1 )*N;
% %         I(c)=max(I(c),I1(c));
%     end
% %     figure(3)
% %     imshow(I+I1) 
%     end;
%     I1=max(I1,I);
% 
% end
% % figure(3)
% % imshow(I1)
% S=I1;
    
    
    



%% версия 1.0 прям таки трассировка лучей
%   Detailed explanation goes here
% [Jj Ij]=meshgrid(1:length(I),1:length(I));
% % for i=1:length(I)
% %     for j=1:length(I)
% x=[ 125:-1:1 ones([1 200]) 1:125];
% y=[ ones([1 125]) 1:200 200*ones([1 125])];
% 
% for s=1:length(x)
% i=x(s);j=y(s);
%         a=(j-Y)/(i-X);
%         b=Y-a*X;
%         xa= find( round(a*Ij+b)==Jj );
%         I1=I;I1(xa)=0.75;
%         figure(3)
%         imshow(I1) 
%         Ai=max(I(xa));
%         if Ai>0
%         xb= find( I==Ai );
%         xb=xb(1);
%         if j<=100
%             
%                 xa=xa(1: find(xa==xb)-1);
%                 I(xa)=I(xb);
%             
%         else
%             
%                 xa=xa(find(xa==xb)-1:length(xa));
%                 I(xa)=I(xb);
%             
%         end
%         end
%             
% S=I;
% 
% figure(3)
% imshow(I)        

end

